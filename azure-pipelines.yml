
trigger:
  branches:
    include:
    - master
    - 'feature/*'
  tags:
    include:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'windows-2019'

variables:
- group: GitHubPATGroup
- group: CodeSign
- name: solution
  value: '**/*.sln'

jobs:
- job: NetFramework
  displayName: .NET Framework
  variables:
    targetFramework: net461

  steps:

  - task: InstallSSHKey@0
    displayName: Install SSH key for code signing
    inputs:
      knownHostsEntry: '$(CODESIGN_KNOWN_HOSTS)'
      sshPublicKey: '$(CODESIGN_PUBLIC_KEY)'
      sshKeySecureFile: 'id_rsa'

  - task: PowerShell@2
    displayName: 'PreBuildSteps'
    inputs:
      targetType: 'filePath'
      filePath: 'build/PreBuild.ps1'
      arguments: '"$(Build.BuildId)" "$(Build.SourceBranch)"'

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      msbuildArgs: '/p:TargetFramework=$(targetFramework) /p:_InstallerTargetFramework=$(targetFramework)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    displayName: 'RunTests'
    condition: not(startsWith(variables['targetFramework'], 'netcoreapp'))
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - template: build/templates/copy-and-publish.yml
    parameters:
      displayName: '.NET Framework Executable'
      fileName: 'OfficeRibbonXEditor.exe'
      project: 'OfficeRibbonXEditor'

  - template: build/templates/sign-and-publish.yml
    parameters:
      displayName: '.NET Framework Executable'

  - template: build/templates/copy-and-publish.yml
    parameters:
      displayName: '.NET Framework Installer'
      fileName: 'OfficeRibbonXEditor.msi'
      project: 'Installer'

  - template: build/templates/sign-and-publish.yml
    parameters:
      displayName: '.NET Framework Installer'

- job: NetCore
  displayName: .NET Core
  variables:
    targetFramework: netcoreapp3.0

  steps:

  - task: InstallSSHKey@0
    inputs:
      knownHostsEntry: '$(CODESIGN_KNOWN_HOSTS)'
      sshPublicKey: '$(CODESIGN_PUBLIC_KEY)'
      sshKeySecureFile: 'id_rsa'

  - task: PowerShell@2
    displayName: 'PreBuildSteps'
    inputs:
      targetType: 'filePath'
      filePath: 'build/PreBuild.ps1'
      arguments: '"$(Build.BuildId)" "$(Build.SourceBranch)"'
      
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '-p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework)'
      configuration: '$(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator'
    inputs:
      command: custom
      custom: tool
      arguments: 'install --global dotnet-reportgenerator-globaltool'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: '**/*Tests.csproj'
      arguments: '-p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/ /p:CopyLocalLockFileAssemblies=true'
      configuration: '$(buildConfiguration)'
      nobuild: true

  - script: |
      reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
    displayName: 'Create code coverage report'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: publish
      projects: '**/OfficeRibbonXEditor.csproj'
      publishWebProjects: false
      zipAfterPublish: false
      arguments: '-p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework) --output $(Build.ArtifactStagingDirectory)'
      configuration: '$(buildConfiguration)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish binaries (unsigned)'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Core Binaries (Unsigned)'
      publishLocation: 'Container' # Options: container, filePath

  - template: build/templates/sign-and-publish.yml
    parameters:
      displayName: '.NET Core Binaries'
